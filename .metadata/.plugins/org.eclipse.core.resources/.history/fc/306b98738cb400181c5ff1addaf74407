//------------------------------------------------------------------------------------
// Hello.c
//------------------------------------------------------------------------------------
//
// Test program to demonstrate serial port I/O.  This program writes a message on
// the console using the printf() function, and reads characters using the getchar()
// function.  An ANSI escape sequence is used to clear the screen if a '2' is typed.
// A '1' repeats the message and the program responds to other input characters with
// an appropriate message.
//
// Any valid keystroke turns on the green LED on the board; invalid entries turn it off
//


//------------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------------
#include "stm32f769xx.h"
#include "hello.h"

#include<stdint.h>
#include <ctype.h>


//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
    Sys_Init(); // This always goes at the top of main (defined in init.c)

    char choice;
	char in[3];
	char terminate = 1;
	char canprint = 1;
    int size = 3;
    int line = 12;
    char str[13] = {};
    int i = 0;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
    //fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
    //printf("Test of the printf() function.\n\n");

    printf("\r\n                       PRESS <ESC> or <CTRL>+ [ to QUIT \r\n");

    for(int i=0;i<3;i++){
    	printf("\n\r");
    }

    //    __HAL_RCC_GPIOJ_CLK_ENABLE(); // Need to enable clock for peripheral bus on GPIO Port J

    volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    *RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal

    HAL_Delay(1000); // Pause for a second
    printf("\033[33;44m"); //Set Background blue and text yellow

    //isprint()
    while(terminate){
    	choice = getchar();

		if(choice == 27){
			terminate = 0;
		}
		else if (iscntrl(choice) == 0){
			printf("\033[6H");
			printf("\033[K");
			printf("The keyboard character is %c\r\n", choice);
		}
		else {
			if (line == 25){
				for (int i = 12;i >=1; i--){
					str[i-1]= str[i];
				}
				str[12] = ("%02x",choice);
				for (int i = 0; i<=12;i++){
					printf("%02x \n\r",str[i]);
					/*printf("\033[%dH",i);
					printf("\aThe keyboard character $%02x is ",str[i-12]);
					printf("\033[4m"); //underline
					printf("'not printable'");
					fflush(stdout);
					printf("\033[0m");
					printf("\033[33;44m");
					printf(".");
					fflush(stdout);
					*/
				}
				printf("\n\n");
			}
			else{
				str[i] = ("%02x",choice);
				printf("\033[%dH",line);
				printf("\aThe keyboard character $%02x is ",choice);
				printf("\033[4m"); //underline
				printf("'not printable'");
				fflush(stdout);
				printf("\033[0m");
				printf("\033[33;44m");
				printf(".");
				fflush(stdout);
				i++;
				line++;

			}
		}
    }

// Messing around with more stuff
				//printf("Enter an alphanumeric sequence (press <enter> if you want to send less than %d characters): \r\n", size + 1);
				//int a = uart_getline(&USB_UART, in, size);
				//printf("\r\nuart_getline result: %d\r\n", a);
}

//------------------------------------------------------------------------------------
//Extra thing to consider...
//------------------------------------------------------------------------------------
void serial_print_things(void) {
	//Input Buffer
	char input[2];
	input[0]=0;
	input[1]=0;

	//Initialize the system
	Sys_Init();
	initUart(&Second_UART, 9600, USART6); // Allow printing over USART6 (Arduino pins D0 - Rx and D1 - TX)
	uart_print(&USB_UART, "\033[2J\033[;H");
	uart_print(&Second_UART, "\033[2J\033[;H");
	uart_print(&USB_UART, "Hello World: This is the USB Serial Connection\r\n");
	uart_print(&Second_UART, "Hello World: This is the other UART Connection\r\n");
	uart_print(&USB_UART, "In order to send newlines to this terminal,\r\n");
	uart_print(&USB_UART, "Press <ESC> and type \"[20h\" (without quotes)\r\n");
	uart_print(&USB_UART, "To get out of newline mode and back to line feed mode,\r\n");
	uart_print(&USB_UART, "Press <ESC> and type \"[20l\" (without quotes)\r\n");
	uart_print(&USB_UART, "\"Thanks for Playing!\"\r\n");

	printf("HIS SENTENCE USES PRINTF!!!\r\n");
  // Don't forget to end printf with newline or run fflush(stdout) after it!

	while(1) {
		input[0]=uart_getchar(&USB_UART, 0);
		uart_print(&USB_UART, input);
		uart_print(&Second_UART, input);
	}

	while(1);// HALT AND CATCH FIRE
}
